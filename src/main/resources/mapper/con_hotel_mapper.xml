<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.goott.trip.concho.mapper.ConHotelMapper">
    <!-- Result Map 설정 -->
    <resultMap id="ConHotelAndIataMap" type="ConHotelAndIata">
        <id property="uuid" column="uuid"/>
        <result property="iataFk" column="iata_fk"/>
        <result property="hotelAdId" column="hotel_ad_id"/>
        <result property="hotelName" column="hotel_name"/>
        <result property="sampleImage" column="sample_image"/>
        <result property="latitude" column="latitude"/>
        <result property="longitude" column="longitude"/>
        <result property="createdAt" column="created_at"/>

        <association property="conIataCode" javaType="ConIataCode">
            <result property="iataCode" column="iata_code"/>
            <result property="city" column="city"/>
            <result property="cityKo" column="city_ko"/>
            <result property="country" column="country"/>
            <result property="countryKo" column="country_ko"/>
            <result property="exist" column="exist"/>
        </association>
    </resultMap>


    <!-- con_iata_code 중에 exist가 0인 항목 하나를 랜덤으로 선택 -->
    <select id="findRandomIataCodeWithExistZero" resultType="ConIataCode">
        SELECT
            iata_code, city, city_ko, country, country_ko, exist
        FROM
            trip.con_iata_code
        WHERE
            exist = 0
        ORDER BY
            RAND()
        LIMIT 1
    </select>

    <!-- 호텔 정보 IATA 코드로 조회 iata_table 과 조인 -->
    <select id="findHotelAndIataListByIataCode" resultMap="ConHotelAndIataMap">
        SELECT
            h.uuid, h.iata_fk, h.hotel_ad_id, h.hotel_name,
            h.sample_image, h.latitude, h.longitude, h.created_at,
            i.iata_code, i.city, i.city_ko, i.country, i.country_ko, i.exist
        FROM
            con_hotel h JOIN con_iata_code i ON h.iata_fk = i.iata_code
        WHERE
            h.iata_fk = #{iataCode}
    </select>

    <!-- IATA 코드로 아마데우스 API에서 받아온 호텔 리스트 저장 -->
    <insert id="saveHotelList">
        INSERT INTO con_hotel (uuid, iata_fk, hotel_ad_id, hotel_name, sample_image, latitude, longitude, created_at)
        VALUES
        <foreach collection="list" item="hotel" separator=",">
            (#{hotel.uuid}, #{hotel.iataFk}, #{hotel.hotelAdId}, #{hotel.hotelName}, #{hotel.sampleImage}, #{hotel.latitude}, #{hotel.longitude}, NOW())
        </foreach>
    </insert>

    <!-- 구글에서 크롤링한 이미지 리스트 이미지64 테이블에 저장 -->
    <insert id="saveImage64List">
        INSERT INTO con_image64 (uuid, hotel_uuid, base64, created_at)
        VALUES
        <foreach collection="list" item="image" separator=",">
            (#{image.uuid}, #{image.hotelUuid}, #{image.base64}, #{image.createdAt})
        </foreach>
    </insert>

    <!-- api 사용량 생성 및 업데이트 -->
    <update id="updateOrSaveApiUsage">
        INSERT INTO con_api_usage (category, cnt, use_date)
        VALUES (#{category}, 1, CURDATE())
        ON DUPLICATE KEY UPDATE
            cnt = cnt + 1
    </update>


    <!-- IATA 코드로 조회하여 exist를 true로 설정 -->
    <update id="updateExistToTrueByIataCode">
        UPDATE con_iata_code
        SET exist = true
        WHERE iata_code = #{iataCode}
    </update>

    <select id="findIataCodeBySearchStr" parameterType="String" resultType="ConIataCode">
        SELECT * FROM con_iata_code
        WHERE (
                city_ko LIKE CONCAT('%', #{searchStr}, '%')
                OR country_ko LIKE CONCAT('%', #{searchStr}, '%')
                OR iata_code LIKE CONCAT('%', #{searchStr}, '%')
            ) AND exist = 1
    </select>

    <!-- con_offer_search => searchParam 으로 검색 (1시간 이내, 가장 최근 하나만) -->
    <select id="findOfferSearchBySearchParam" parameterType="SearchParam" resultType="ConOfferSearch">
        SELECT * FROM con_offer_search
        WHERE hotel_ad_id = #{hotelAdId}
          AND check_in = #{checkIn}
          AND check_out = #{checkOut}
          AND guest_cnt = #{personCnt}
          AND search_at >= NOW() - INTERVAL 1 HOUR
        ORDER BY search_at DESC
        LIMIT 1
    </select>

    <!-- 호텔 정보 꺼내기 -->
    <select id="findHotelByHotelUuid" parameterType="String" resultType="ConHotel">
        SELECT * FROM con_hotel WHERE uuid = #{hotelUuid}
    </select>
    <!-- 호텔 평점 꺼내기 -->
    <select id="findHotelLevelByHotelUuid" parameterType="String" resultType="ConHotelLevel">
        SELECT * FROM con_hotel_level WHERE hotel_uuid = #{hotelUuid}
    </select>
    <!-- 호텔 이미지 list 꺼내기 -->
    <select id="findImage64ListByHotelUuid" parameterType="String" resultType="ConImage64">
        SELECT * FROM con_image64 WHERE hotel_uuid = #{hotelUuid}
    </select>

    <!-- 호텔 offer list 꺼내기 -->
    <select id="findOfferListBySearchNum" parameterType="Integer" resultType="ConHotelOffer">
        SELECT * FROM con_hotel_offer WHERE search_num = #{searchNum}
    </select>


    <!-- offer Search 저장 -->
    <insert id="saveOfferSearch" parameterType="ConOfferSearch">
        <selectKey resultType="int" keyProperty="num" order="BEFORE">
            SELECT IFNULL(max(num), 0) + 1 FROM con_offer_search
        </selectKey>
        INSERT INTO con_offer_search
        VALUES (
        #{num}, #{hotelUuid}, #{hotelAdId},
        #{checkIn}, #{checkOut}, #{guestCnt},
        #{memberId}, NOW()
        )
    </insert>

    <!-- 현제시간 기준 hour 이후 데이터 삭제 -->
    <delete id="deleteOfferSearchByHour" parameterType="int">
        DELETE FROM con_offer_search
        WHERE NOW() - INTERVAL #{hour} HOUR >= search_at
    </delete>
    <!-- id 로 삭제 -->
    <delete id="deleteOfferSearchByNum" parameterType="int">
        DELETE FROM con_offer_search
        WHERE num = #{num}
    </delete>

    <!-- offer list 저장 -->
    <insert id="saveOfferList" parameterType="ConHotelOffer">
        INSERT INTO con_hotel_offer
        VALUES
        <foreach collection="list" item="offer" separator=",">
            (
            #{offer.uuid}, #{offer.searchNum}, #{offer.hotelAdId}, #{offer.offerId}, #{offer.hotelType}, #{offer.available},
            #{offer.checkIn}, #{offer.checkOut}, #{offer.category}, #{offer.bedCnt}, #{offer.bedCategory}, #{offer.roomComment},
            #{offer.adultCnt}, #{offer.currency}, #{offer.totalCost}, #{offer.perNightCost}
            )
        </foreach>
    </insert>
    <!-- hotel level 저장 -->
    <insert id="saveHotelLevel" parameterType="ConHotelLevel">
        INSERT IGNORE INTO con_hotel_level
        VALUES (
                   #{hotelUuid}, #{hotelAdId}, #{overall}, #{staff}, #{location}, #{service}, #{comforts},
                   #{sleep}, #{pool}, #{money}, #{facilities}, #{meal}, #{nearAttraction}
               )
        ON DUPLICATE KEY UPDATE
             hotel_ad_id = VALUES(hotel_ad_id),
             overall = VALUES(overall),
             staff = VALUES(staff),
             location = VALUES(location),
             service = VALUES(service),
             comforts = VALUES(comforts),
             sleep = VALUES(sleep),
             pool = VALUES(pool),
             money = VALUES(money),
             facilities = VALUES(facilities),
             meal = VALUES(meal),
             near_attraction = VALUES(near_attraction)
    </insert>
</mapper>
